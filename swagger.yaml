swagger: "2.0"

info:
  title: "Simple-Contact-Manager API"
  version: "1"
  
host: contact-manager.rodlop.net
basePath: /LAMPAPI
schemes:
  - http

consumes:
  - application/json
produces:
  - application/json
  
paths:
  /Testing.php:
    post:
      summary: Basic testing endpoint
      description: This endpoint can be used to test if the server is up.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              api_name: 
                type: string
                example: simple-contact-manager
              api_version:
                type: string
                example: 1
              date:
                type: string
                description: The current date and time from the server
                example: 2024-05-20T01:09:30+00:00
        500:
          $ref: '#/responses/ServerError'

  /Login.php:
    post:
      summary: Application user login endpoint
      description: Performs user authentication
      parameters:
        - in: body
          name: Login
          schema:
            type: object
            properties:
              username:
                type: string
                description: Authentication username
                example: RickL
              password:
                type: string
                description: Authentication password
                example: WeLoveCOP4331
      responses:
        200:
          description: Authentication successful
          schema:
            $ref: '#/definitions/UserFullInfo'
        404:
          description: Authentication failure, either wrong username or password
          schema:
            $ref: '#/definitions/ErrorInfo'
        400:
          $ref: '#/responses/BadRequest'
        500:
          $ref: '#/responses/ServerError'
          
  /Register.php:
    post:
      summary: New user registration endpoint
      description: Creates a new application user
      parameters:
        - in: body
          name: Login
          schema:
            type: object
            properties:
              username:
                type: string
                description: Username for the new user
                example: RickL
              password:
                type: string
                description: Password for the new user
                example: WeLoveCOP4331
              firstName:
                type: string
                description: First name for the new user
                example: John
              lastName:
                type: string
                description: Last name for the new user
                example: Doe
      responses:
        200:
          description: Registration successful
          schema:
            $ref: '#/definitions/UserFullInfo'
        409:
          description: Username already exists
          schema:
            $ref: '#/definitions/ErrorInfo'
        400:
            $ref: '#/responses/BadRequest'
        500:
            $ref: '#/responses/ServerError'
          

definitions:
  UserFullInfo:
    type: object
    properties:
      id:
        type: integer
        description: The ID of an application user
        example: 123
      username:
        type: string
        description: The application login username
        example: RickL
      firstName:
        type: string
        description: First name property of the application user
        example: John
      lastName:
        type: string
        description: Last name property of the application user
        example: Doe
  ErrorInfo:
    properties:
      error:
        type: string
        description: The text description of the error.
        example: "Information about the error"

responses:
  BadRequest:
    description: Malformed request or JSON on front-end
    schema:
      $ref: '#/definitions/ErrorInfo'
  ServerError:
    description: Error or exception on back-end
    schema:
      $ref: '#/definitions/ErrorInfo'